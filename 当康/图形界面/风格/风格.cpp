#include "当康.h"

引入 当康::基础类;
引入 当康::包装类;
引入 当康::开发者;

引入 当康::图形处理;

命名空间 当康 {
命名空间 图形界面 {

类定义(当康::图形界面::风格)

风格* 风格::获取风格(组件 *组件指针, 风格类型 类型) {
	switch(类型){
	case 简易:
		返回 风格_简易::获取风格(组件指针);
	case CDE:
		返回 风格_CDE::获取风格(组件指针);
	default:
		返回 空指针;
	}
}

风格& 风格::构造() {
	返回 本体;
}

void 风格::析构() {

}

风格& 风格::构造(组件 *组件指针) {
	设置组件指针(组件指针);

	返回 本体;
}

风格& 风格::复制构造(只读 风格 &其他实例) {
	抛出 异常("风格:复制构造方法不存在！\n"); // 默认操作，实现复制构造方法需将其删除

	返回 本体;
}

风格& 风格::移动构造(风格 &&其他实例) {
	抛出 异常("风格:移动构造方法不存在！\n"); // 默认操作，实现移动构造方法需将其删除

	返回 本体;
}

组件* 风格::获取组件指针() const {
	返回 组件指针;
}

void 风格::设置组件指针(组件 *组件指针) {
	本元->组件指针 = 组件指针;
}

void 风格::绘制组件(画笔 *笔) {
	// 默认为空
}

}
}

