#pragma once

#include "模板容器/容器/容器.hpp"

命名空间 当康 {
命名空间 模板容器 {

模板<类 E>
模板类 数组: 继承 模板容器::容器<E> {
模板声明(数组)

保护:
	静态 只读 i32 数组初始容量 = 100;
	静态 只读 i32 数组扩大倍数 = 2;

保护:
	E *数据 = 空指针;

公开:
	数组& 构造() {
		返回 本体;
	}

	void 析构() {

	}

公开:
	数组& 复制构造(只读 数组 &其他实例) {
		抛出 基础类::异常("数组:复制构造方法不存在！\n"); // 默认操作，实现复制构造方法需将其删除

		返回 本体;
	}

	数组& 移动构造(数组 &&其他实例) {
		抛出 基础类::异常("数组:移动构造方法不存在！\n"); // 默认操作，实现移动构造方法需将其删除

		返回 本体;
	}

公开:
	虚函数 迭代器<E>* 获取迭代器() 覆盖 {
		返回 0;
	}

公开:
	虚函数 void 增加成员(只读 E &成员) 覆盖 {

	}

	虚函数 void 删除成员(只读 E &成员) 覆盖 {

	}

	虚函数 void 修改成员(只读 E &原成员, 只读 E &现成员) 覆盖 {

	}

	虚函数 E 查找成员(i32 索引) 覆盖 {

	}

保护:
	模板<类 E1>
	模板类 数组_迭代器: 继承 迭代器<E1> {
	模板声明(数组_迭代器)

	保护:
		数组<E1> *数组指针 = 空指针;

	公开:
		数组_迭代器& 构造() {
			返回 本体;
		}

		void 析构() {

		}

	公开:
		数组_迭代器& 复制构造(只读 数组_迭代器 &其他实例) {
			返回 本体;
		}

		数组_迭代器& 移动构造(数组_迭代器 &&其他实例) {
			返回 本体;
		}

	公开:
		虚函数 bool 是否存在下个元素() 覆盖 {
			返回 真;
		}

		虚函数 E 下个元素() 覆盖 {

		}

		虚函数 void 删除当前元素() 覆盖 {

		}
	};
};

模板定义(当康::模板容器::数组)
模板定义(当康::模板容器::数组_迭代器)

}
}
