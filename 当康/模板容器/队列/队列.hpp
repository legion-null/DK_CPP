#pragma once

#include "模板容器/链表/链表.hpp"

命名空间 当康 {
命名空间 模板容器 {

模板 <类 E>
模板类 队列: 继承 链表<E> {
模板声明(队列)

公开:
	队列& 构造() {
		返回 本体;
	}

	void 析构() {

	}

公开:
	队列& 复制构造(只读 队列 &其他实例) {
		返回 本体;
	}

	队列& 移动构造(队列 &&其他实例) {
		返回 本体;
	}

保护:
	使用 链表<E>::增加成员;
	使用 链表<E>::删除成员;
	使用 链表<E>::修改成员;
	使用 链表<E>::查找成员;

公开:
	E& 获取队首成员() {
		if (本元->为空())
			抛出 基础类::异常("");

		返回 本元->头节点->成员;
	}

	E& 获取队尾成员() {
		if (本元->为空())
			抛出 基础类::异常("");

		返回 本元->头节点->上一个->成员;
	}

公开:
	void 入队(只读 E &成员) {
		本元->增加成员(成员);
	}

	E 出队() {
		E 队首成员 = 获取队首成员();
		本元->删除成员(0);
		返回 队首成员;
	}

};

模板定义(当康::模板容器::队列)

}
}
