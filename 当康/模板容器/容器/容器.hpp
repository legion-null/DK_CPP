#pragma once

#include "基础类/对象/对象.h"

#include "模板容器/可迭代接口/可迭代接口.h"

命名空间 当康 {
命名空间 模板容器 {

模板<类 E>
模板类 容器: 继承 基础类::对象, 虚继承 可迭代接口<E> {
模板声明(容器)

保护:
	i32 成员数量 = 0;

公开:
	容器& 构造() {
		返回 本体;
	}

	void 析构() {

	}

公开:
	容器& 复制构造(只读 容器 &其他实例) {
		抛出 基础类::异常("容器:复制构造方法不存在！\n"); // 默认操作，实现复制构造方法需将其删除

		返回 本体;
	}

	容器& 移动构造(容器 &&其他实例) {
		抛出 基础类::异常("容器:移动构造方法不存在！\n"); // 默认操作，实现移动构造方法需将其删除

		返回 本体;
	}

公开:
	i32 获取成员数量() 只读 {
		返回 成员数量;
	}

	bool 为空() 只读 {
		返回 获取成员数量() == 0 ? 真 : 假;
	}

公开:
	虚函数 bool 索引合法性判断(i32 索引) {
		if (索引 < 0 或 索引 >= 成员数量)
			返回 假;
		else
			返回 真;
	}

公开:
	虚函数 void 增加成员(只读 E &成员) = 0;
	虚函数 void 删除成员(i32 索引) = 0;
	虚函数 void 修改成员(i32 索引, 只读 E &现成员) = 0;
	虚函数 E& 查找成员(i32 索引) = 0;

公开:
	E& 操作符[](i32 索引) {
		返回 查找成员(索引);
	}

公开:
	虚函数 迭代器<E>* 获取迭代器() 覆盖 {
		返回 0;
	}

保护:
	模板<类 E1>
	模板类 容器_迭代器: 继承 模板容器::迭代器<E1> {
	模板声明(容器_迭代器)

	保护:
		容器<E1> *当前容器 = 空指针;
		i32 当前索引 = 0;

	公开:
		容器_迭代器(容器<E1> *容器指针) {
			构造(容器指针);
		}

	公开:
		容器_迭代器& 构造() {
			返回 本体;
		}

		void 析构() {

		}

	公开:
		容器_迭代器& 构造(容器<E1> *容器指针) {
			本元->当前容器 = 容器指针;
			返回 本体;
		}

	公开:
		容器_迭代器& 复制构造(只读 容器_迭代器 &其他实例) {
			复制(&其他实例, 本元);
			返回 本体;
		}

		容器_迭代器& 移动构造(容器_迭代器 &&其他实例) {
			返回 本体;
		}

	公开:
		虚函数 bool 是否存在下个成员() 覆盖 {
			if (当前索引 + 1 < 当前容器->获取成员数量())
				返回 真;
			else
				返回 假;
		}

		虚函数 E& 下个成员() 覆盖 {
			返回 (*当前容器)[++当前索引];
		}

		虚函数 void 删除当前成员() 覆盖 {
			当前容器->删除成员(当前索引);
		}
	};

};

模板定义(当康::模板容器::容器)
模板定义(当康::模板容器::容器::容器_迭代器)

}
}
