#include "当康.h"

引入 当康::基础类;
引入 当康::包装类;
引入 当康::开发者;

命名空间 当康 {
命名空间 图形处理 {

类定义(当康::图形处理::字体_TTF)

类型别名 结构体 TTF字体文件_文件头 {
	i8 魔数[4];				// 用于标识点阵字体文件的魔数, 值为DZZT
	u32 文件大小;				// 点阵字体文件的大小(单位为字节)
	u8 编码格式;				// 点阵字体文件中字符的编码格式, 0为ASCII(只有英文字母), 1为UTF32, 2为GB2312, 3为UTF-8(仅4字节有效位数)
	u8 字符集;				// 决定文件中具体包含哪些字符, 0 = ASCII_128, 1 = GB2312, 2 = UTF_8
	i32 字符宽度;				// 字符宽度，单位为像素（有符号整数）
	i32 字符高度;				// 字符高度，单位为像素（有符号整数）
	u8 像素色深;				// 每个像素所占位数，即字体的色深。典型值为1、2、4、8
	u16 字模数据长度;			// 单个字模数据所占空间大小，因为存在非整字节的情况
}__attribute__ ((packed)) TTF字体文件_文件头;

字体_TTF& 字体_TTF::构造() {
	返回 本体;
}

void 字体_TTF::析构() {

}

字体_TTF& 字体_TTF::复制构造(只读 字体_TTF &其他实例) {
	抛出 异常("字体_TTF:复制构造方法不存在！\n"); // 默认操作，实现复制构造方法需将其删除

	返回 本体;
}

字体_TTF& 字体_TTF::移动构造(字体_TTF &&其他实例) {
	抛出 异常("字体_TTF:移动构造方法不存在！\n"); // 默认操作，实现移动构造方法需将其删除

	返回 本体;
}

}
}
