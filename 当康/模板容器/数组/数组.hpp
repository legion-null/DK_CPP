#pragma once

#include "模板容器/容器/容器.hpp"

命名空间 当康 {
命名空间 模板容器 {

模板<类 E>
模板类 数组: 继承 模板容器::容器<E> {
模板声明(数组)

保护:
	静态 只读 i32 数组初始容量 = 100;
	静态 只读 i32 数组扩大倍数 = 2;

保护:
	E *数据 = 空指针;
	i32 当前容量 = 0;

公开:
	数组(i32 目标容量) {
		构造(目标容量);
	}

公开:
	数组& 构造() {
		设置当前容量(数组初始容量);
		返回 本体;
	}

	void 析构() {

	}

公开:
	数组& 构造(i32 目标容量) {
		设置当前容量(目标容量);
		返回 本体;
	}

公开:
	数组& 复制构造(只读 数组 &其他实例) {
		抛出 基础类::异常("数组:复制构造方法不存在！\n"); // 默认操作，实现复制构造方法需将其删除

		返回 本体;
	}

	数组& 移动构造(数组 &&其他实例) {
		抛出 基础类::异常("数组:移动构造方法不存在！\n"); // 默认操作，实现移动构造方法需将其删除

		返回 本体;
	}

公开:
	i32 获取当前容量() 只读 {
		返回 当前容量;
	}

	void 设置当前容量(i32 目标容量) {
		E *临时数据 = 创建 E[目标容量];

		// 复制数据
		if (本元->成员数量 > 0)
			复制(数据, 临时数据, 本元->成员数量);

		// 交换指针
		交换(数据, 临时数据);

		当前容量 = 目标容量;

		if (临时数据 != 空指针)
			删除[] 临时数据;
	}

公开:
	虚函数 void 增加成员(只读 E &成员) 覆盖 {
		数据[本元->成员数量] = 成员;

		本元->成员数量++;
	}

	虚函数 void 删除成员(i32 索引) 覆盖 {
		if (本元->索引合法性判断(索引) == 假)
			抛出 基础类::异常("");

		for (i32 i = 索引; i < 本元->成员数量 - 1; i++)
			数据[i] = 数据[i + 1];

		本元->成员数量--;
	}

	虚函数 void 修改成员(i32 索引, 只读 E &现成员) 覆盖 {
		if (本元->索引合法性判断(索引) == 假)
			抛出 基础类::异常("");

		数据[索引] = 现成员;
	}

	虚函数 E& 查找成员(i32 索引) 覆盖 {
		if (本元->索引合法性判断(索引) == 假)
			抛出 基础类::异常("");

		返回 数据[索引];
	}
};

模板定义(当康::模板容器::数组)

}
}
