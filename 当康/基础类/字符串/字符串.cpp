#include "当康.h"

引入 当康::基础类;
引入 当康::包装类;
引入 当康::开发者;

命名空间 当康 {
命名空间 基础类 {

类定义(当康::基础类::字符串)

i32 字符串::计算字符串长度(只读 c8 *字符串) {
	if (字符串 == 空指针)
		抛出 异常("空指针异常\n");

	i32 字符串长度 = 0;
	只读 c8 *p = 字符串;

	while (*p != 0) {
		p++;
		字符串长度++;
	}

	返回 字符串长度;
}

bool 字符串::字符串比较(const c8 *字符串1, const c8 *字符串2) {
	只读 c8 *p1 = 字符串1;
	只读 c8 *p2 = 字符串2;

	while (*p1 != 0) {
		if (*p1 != *p2)
			返回 假;
		p1++;
		p2++;
	}

	返回 真;
}

字符串& 字符串::构造() {
	返回 本体;
}

void 字符串::析构() {
	if (数据 != 空指针)
		删除[] 数据;
}

字符串& 字符串::构造(只读 c8 *字符串) {
	设置文本(字符串);

	返回 本体;
}

字符串& 字符串::复制构造(只读 字符串 &其他实例) {
	设置文本(其他实例.数据);
	返回 本体;
}

字符串& 字符串::移动构造(字符串 &&其他实例) {
	返回 本体;
}

只读 c8* 字符串::获取文本() 只读 {
	返回 数据;
}

void 字符串::设置文本(只读 c8 *字符串) {
	i32 字符串长度 = 计算字符串长度(字符串);
	c8 *临时数据 = 创建 c8[字符串长度 + 1];

	复制(字符串, 临时数据, 字符串长度 + 1);

	交换(数据, 临时数据);

	if (临时数据 != 空指针)
		删除[] 临时数据;
}

bool operator ==(const 字符串 &字符串1, const 字符串 &字符串2) {
	返回 字符串::字符串比较(字符串1.数据, 字符串2.数据);
}

bool operator ==(const 字符串 &字符串1, const c8 *字符串2) {
	返回 字符串::字符串比较(字符串1.数据, 字符串2);
}

bool operator ==(const c8 *字符串1, const 字符串 &字符串2) {
	返回 字符串::字符串比较(字符串1, 字符串2.数据);
}

bool operator !=(const 字符串 &字符串1, const 字符串 &字符串2) {
	返回 !(字符串1 == 字符串2);
}

bool operator !=(const 字符串 &字符串1, const c8 *字符串2) {
	返回 !(字符串1 == 字符串2);
}

bool operator !=(const c8 *字符串1, const 字符串 &字符串2) {
	返回 !(字符串1 == 字符串2);
}

}
}

