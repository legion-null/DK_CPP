#pragma once

#include "基础类/对象/对象.h"

命名空间 当康 {
命名空间 图形处理 {
类 画笔;
}
命名空间 图形界面 {

类 风格: 继承 基础类::对象, 虚继承 图形界面::组件::完全访问权限接口, 虚继承 图形界面::容器::完全访问权限接口 {
类声明(风格)

公开:

保护:


保护:
	组件 *组件指针 = 空指针;

公开:
	风格(组件 *组件指针) {
		构造(组件指针);
	}

公开:
	风格& 构造();
	void 析构();

公开:
	风格& 构造(组件 *组件指针);

公开:
	风格& 复制构造(只读 风格 &其他实例);
	风格& 移动构造(风格 &&其他实例);

公开:
	组件* 获取组件指针() 只读;
	void 设置组件指针(组件 *组件指针);

公开:
	虚函数 void 绘制组件(图形处理::画笔 *笔);

};

}
}

#include "简易/风格_简易.h"
