#pragma once

#include "基础类/对象/对象.h"

命名空间 当康 {
命名空间 基础类 {

类 字符串: 继承 基础类::对象 {
类声明(字符串)

公开:
	静态 i32 计算字符串长度(只读 c8 *字符串);

	静态 bool 字符串比较(只读 c8 *字符串1, 只读 c8 *字符串2);

公开:

保护:
	c8 *数据 = 空指针;

公开:
	字符串(只读 c8 *字符串) {
		构造(字符串);
	}

	字符串& 操作符 =(只读 c8 *字符串) {
		返回 构造(字符串);
	}

公开:
	字符串& 构造();
	void 析构();

公开:
	字符串& 构造(只读 c8 *字符串);

公开:
	字符串& 复制构造(只读 字符串 &其他实例);
	字符串& 移动构造(字符串 &&其他实例);

公开:
	只读 c8* 获取文本() 只读;
	void 设置文本(只读 c8 *字符串);

公开:
	友元 bool 操作符==(只读 字符串 &字符串1, 只读 字符串 &字符串2);
	友元 bool 操作符==(只读 字符串 &字符串1, 只读 c8 *字符串2);
	友元 bool 操作符==(只读 c8 *字符串1, 只读 字符串 &字符串2);

	友元 bool 操作符!=(只读 字符串 &字符串1, 只读 字符串 &字符串2);
	友元 bool 操作符!=(只读 字符串 &字符串1, 只读 c8 *字符串2);
	友元 bool 操作符!=(只读 c8 *字符串1, 只读 字符串 &字符串2);
};

bool 操作符==(只读 字符串 &字符串1, 只读 字符串 &字符串2);
bool 操作符==(只读 字符串 &字符串1, 只读 c8 *字符串2);
bool 操作符==(只读 c8 *字符串1, 只读 字符串 &字符串2);

bool 操作符!=(只读 字符串 &字符串1, 只读 字符串 &字符串2);
bool 操作符!=(只读 字符串 &字符串1, 只读 c8 *字符串2);
bool 操作符!=(只读 c8 *字符串1, 只读 字符串 &字符串2);

}
}
