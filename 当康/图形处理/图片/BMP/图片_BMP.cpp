#include "当康.h"

引入 当康::基础类;
引入 当康::包装类;
引入 当康::开发者;

引入 当康::输入输出;

命名空间 当康 {
命名空间 图形处理 {

类定义(当康::图形处理::图片_BMP)

类型别名 结构体 BMP_文件头 {
	i8 魔数[2];				// 用于标识BMP和DIB文件的魔数，一般为0x42 0x4D，即ASCII的BM。以下为可能的取值：BM、BA、CI、CP、IC、PT
	u32 文件大小;				// BMP文件的大小（单位为字节）
	i16 保留值1;				// 保留；实际值因创建程序而异
	i16 保留值2;				// 保留；实际值因创建程序而异
	u32 位图数据起始地址;		// 位图数据（像素数组）的地址偏移，也就是起始地址。
} __attribute__ ((packed)) BMP_文件头;

类型别名 结构体 BMP_信息 {
	u32 结构大小;				// 该头结构的大小（40字节）
	i32 位图宽度;				// 位图宽度，单位为像素（有符号整数）
	i32 位图高度;				// 位图高度，单位为像素（有符号整数）
	u16 色彩平面数;			// 色彩平面数；只有1为有效值
	u16 像素色深;				// 每个像素所占位数，即图像的色深。典型值为1、4、8、16、24和32
	u32 压缩方法;				// 所使用的压缩方法，可取值见下表。
	u32 图像大小;				// 图像大小。指原始位图数据的大小（详见后文），与文件大小不是同一个概念。
	i32 横向分辨率;			// 图像的横向分辨率，单位为像素每米（有符号整数）
	i32 纵向分辨率;			// 图像的纵向分辨率，单位为像素每米（有符号整数）
	u32 调色板颜色数;			// 调色板的颜色数，为0时表示颜色数为默认的2^色深个
	u32 调色板重要颜色数;		// 重要颜色数，为0时表示所有颜色都是重要的；通常不使用本项
} __attribute__ ((packed)) BMP_信息;

类型别名 结构体 BMP_调色盘 {
	u8 rgbBlue;		// 该颜色的蓝色分量  (值范围为0-255)
	u8 rgbGreen;	// 该颜色的绿色分量  (值范围为0-255)
	u8 rgbRed;		// 该颜色的红色分量  (值范围为0-255)
	u8 rgbReserved;	// 保留，必须为0
} __attribute__ ((packed)) BMP_调色盘;

图片_BMP& 图片_BMP::构造() {
	返回 本体;
}

void 图片_BMP::析构() {

}

图片_BMP& 图片_BMP::构造(const 基础类::字符串 &图片文件位置) {
	BMP_文件头 BMP文件头;
	BMP_信息 BMP信息;

	// 打开BMP图像文件
	文件 临时文件 = 文件(图片文件位置, "r");

	// 读取文件基本信息
	临时文件.读((i8*) &BMP文件头, 取字节数(BMP_文件头));

	// 读取BMP相关信息
	临时文件.读((i8*) &BMP信息, 取字节数(BMP_信息));

	// 根据相关信息初始化
	帧缓冲区::构造(BMP信息.位图宽度, BMP信息.位图高度, 32);

	// 文件指针跳转到图像数据开头
	临时文件.设置当前位置(BMP文件头.位图数据起始地址);

	// 读取数据，根据BMP图像为倒置矩阵的特点，在读取时从最后一行开始向上逐行读取，另外，也要考虑到BMP图像的像素格式为BGR
	for (i32 i = 获取高度() - 1; i >= 0; i--) {
		临时文件.读((i8*) (行缓冲[i]), 行缓冲区大小);
	}

	返回 本体;
}

图片_BMP& 图片_BMP::复制构造(只读 图片_BMP &其他实例) {
	抛出 异常("图片_BMP:复制构造方法不存在！\n"); // 默认操作，实现复制构造方法需将其删除

	返回 本体;
}

图片_BMP& 图片_BMP::移动构造(图片_BMP &&其他实例) {
	抛出 异常("图片_BMP:移动构造方法不存在！\n"); // 默认操作，实现移动构造方法需将其删除

	返回 本体;
}

}
}
