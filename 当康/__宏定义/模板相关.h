#pragma once

#include "定义.h"

// 通用

// 模板反射声明
#define __模板__反射声明(类型名) \
\
public:\
	static const 基础类::字符串& 返回类全名() {\
		static const 基础类::字符串 *类全名 = new 基础类::字符串(标识符转字符串(类型名));\
		return *类全名;\
	}\
\
public:\
	virtual const 基础类::字符串& 获取类全名() {\
		return 返回类全名();\
	}\
\

// 模板函数声明
#define __模板__函数声明(类型名,封装) \
\
__类__函数声明(类型名,封装)\
\

// 模板类

// 声明
#define	模板声明(类型名) \
\
__模板__反射声明(类型名)\
__模板__函数声明(类型名,public)\
\

// 定义
#define	模板定义(类型全名) \
\


