#pragma once

#include "定义.h"

// 通用

// 类反射声明
#define __类__反射声明(类型名) \
\
protected:\
	static const 基础类::字符串 *类全名;\
\
	static const i32 哈希值;\
\
public:\
	static const 基础类::字符串& 返回类全名();\
\
public:\
	virtual const 基础类::字符串& 获取类全名();\
\

// 类反射定义
#define __类__反射定义(类型全名) \
\
const 字符串* 类型全名::类全名 = new 字符串(标识符转字符串(类型全名));\
\
const i32 类型全名::哈希值 = 类型::类型注册(类型全名::类全名);\
\
const 字符串& 类型全名::返回类全名() {\
	return *类全名;\
}\
\
const 字符串& 类型全名::获取类全名() {\
	return 返回类全名();\
}\
\

// 类反射函数声明
#define __类__反射函数声明(类型名)	\
\
protected:\
	static 基础类::对象* 构建本类对象() {\
		return (基础类::对象*)(new 类型名());\
	}\
\

// 类函数声明
#define __类__函数声明(类型名,封装) \
\
封装:\
	/* 默认构造函数 */\
	类型名() {\
		构造();\
	}\
\
	/* 析构函数 */\
	virtual ~类型名() {\
		析构();\
	}\
\
封装:\
	/* 复制构造函数 */\
	类型名(const 类型名 &其他实例) {\
		复制构造(其他实例);\
	}\
\
	/* 移动构造函数 */\
	类型名(类型名 &&其他实例) {\
		移动构造(static_cast<类型名&&>(其他实例));\
	}\
\
封装:\
	/* 复制构造函数 operator重载形式 */\
	类型名& operator=(const 类型名 &其他实例) {\
		return 复制构造(其他实例);\
	}\
\
	/* 移动构造函数 operator重载形式 */\
	类型名& operator=(类型名 &&其他实例) {\
		return 移动构造(static_cast<类型名&&>(其他实例));\
	}\
\

// 一般类

// 声明
#define 类声明(类型名) \
\
__类__反射声明(类型名)\
__类__反射函数声明(类型名)\
__类__函数声明(类型名,public)\
\

// 定义
#define 类定义(类型全名) \
\
__类__反射定义(类型全名)\
\


// 抽象类

// 声明
#define 抽象类声明(类型名) \
\
__类__反射声明(类型名)\
__类__函数声明(类型名,public)\
\

// 定义
#define	抽象类定义(类型全名) \
\
__类__反射定义(类型全名)\
\


// 单例类

// 声明
#define 单例声明(类型名) \
\
__类__反射声明(类型名)\
__类__函数声明(类型名,protected)\
\

// 定义
#define 单例定义(类型全名) \
\
__类__反射定义(类型全名)\
\


// 接口类

// 声明
#define 接口声明(类型名) \
\

// 定义
#define	接口定义(类型全名) \
\


