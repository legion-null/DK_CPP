#pragma once

#include <基础类/对象/对象.h>

命名空间 当康 {
命名空间 输入输出 {

类 文件: 继承 基础类::对象 {
类声明(文件)

公开:
	类型别名 枚举 标准输入输出文件 : i8 {
		标准输入 = 0,
		标准输出 = 1,
		标准错误 = 2,
	} 标准输入输出文件;

公开:
	静态 文件 标准输入文件;
	静态 文件 标准输出文件;
	静态 文件 标准错误文件;

保护:
	类 文件数据 *当前文件 = 空指针;

公开:
	文件(只读 基础类::字符串 &文件位置, 只读 基础类::字符串 &读写模式){
		构造(文件位置, 读写模式);
	}

	文件(标准输入输出文件 文件号){
		构造(文件号);
	}

公开:
	文件& 构造();
	void 析构();

公开:
	文件& 构造(只读 基础类::字符串 &文件位置, 只读 基础类::字符串 &读写模式);
	文件& 构造(标准输入输出文件 文件号);

公开:
	文件& 复制构造(只读 文件 &其他实例);
	文件& 移动构造(文件 &&其他实例);

公开:
	void 关闭();

公开:
	void 刷新();

公开:
	i64 获取当前位置();
	void 设置当前位置(i64 位置);

公开:
	i64 获取文件大小();

公开:
	i32 读字节();
	void 读(i8 *缓冲区, i64 长度);

公开:
	void 写字节(i8 数据);
	void 写(只读 i8 *数据, i64 长度);
};

}
}
