#pragma once

#include "定义.h"

// 一般类 -------------------------------------------------------------------------//

// 声明
#define 类声明(类型名) \
\
保护:\
	静态 只读 基础类::字符串 *类全名;\
\
公开:\
	静态 只读 基础类::字符串& 返回类全名();\
\
公开:\
	虚函数 只读 基础类::字符串& 获取类全名();\
\
公开:\
	/* 默认构造函数 */\
	类型名() {\
		构造();\
	}\
\
	/* 析构函数 */\
	虚函数 ~类型名() {\
		析构();\
	}\
\
公开:\
	/* 复制构造函数 */\
	类型名(只读 类型名 &其他实例) {\
		复制构造(其他实例);\
	}\
\
	/* 移动构造函数 */\
	类型名(类型名 &&其他实例) {\
		移动构造(static_cast<类型名&&>(其他实例));\
	}\
\
公开:\
	/* 复制构造函数 操作符重载形式 */\
	类型名& 操作符=(只读 类型名 &其他实例) {\
		返回 复制构造(其他实例);\
	}\
\
	/* 移动构造函数 操作符重载形式 */\
	类型名& 操作符=(类型名 &&其他实例) {\
		返回 移动构造(static_cast<类型名&&>(其他实例));\
	}\

// 实现
#define 类定义(类型名) \
\
只读 字符串* 类型名::类全名 = 创建 字符串(标识符转字符串(类型名));\
\
只读 字符串& 类型名::返回类全名() {\
	返回 *类全名;\
}\
\
只读 字符串& 类型名::获取类全名() {\
	返回 返回类全名();\
}\

//--------------------------------------------------------------------------------//

// 抽象类 -------------------------------------------------------------------------//

// 声明
#define 抽象类声明(类型名) \
\
类声明(类型名)

// 实现
#define	抽象类定义(类型名) \
\
类定义(类型名)

//--------------------------------------------------------------------------------//

// 接口类 -------------------------------------------------------------------------//

// 声明
#define 接口声明(类型名) \

// 实现
#define	接口定义(类型名) \

//--------------------------------------------------------------------------------//

// 模板类 -------------------------------------------------------------------------//

// 声明
#define	模板声明(类型名) \
\
公开:\
	静态 只读 基础类::字符串& 返回类全名() {\
		静态 只读 基础类::字符串 类全名(标识符转字符串(类型名));\
		返回 类全名;\
	}\
\
公开:\
	虚函数 只读 基础类::字符串& 获取类全名() {\
		返回 返回类全名();\
	}\
\
公开:\
	/* 默认构造函数 */\
	类型名() {\
		构造();\
	}\
\
	/* 析构函数 */\
	虚函数 ~类型名() {\
		析构();\
	}\
\
公开:\
	/* 复制构造函数 */\
	类型名(只读 类型名 &其他实例) {\
		复制构造(其他实例);\
	}\
\
	/* 移动构造函数 */\
	类型名(类型名 &&其他实例) {\
		移动构造(static_cast<类型名&&>(其他实例));\
	}\
\
公开:\
	/* 复制构造函数 操作符重载形式 */\
	类型名& 操作符=(只读 类型名 &其他实例) {\
		返回 复制构造(其他实例);\
	}\
\
	/* 移动构造函数 操作符重载形式 */\
	类型名& 操作符=(类型名 &&其他实例) {\
		返回 移动构造(static_cast<类型名&&>(其他实例));\
	}\

// 实现
#define	模板定义(类型名) \
\


//--------------------------------------------------------------------------------//
