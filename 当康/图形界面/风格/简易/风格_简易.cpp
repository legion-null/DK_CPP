#include "当康.h"

引入 当康::基础类;
引入 当康::包装类;
引入 当康::开发者;

引入 当康::图形处理;

命名空间 当康 {
命名空间 图形界面 {

类定义(当康::图形界面::风格_简易)

只读 颜色 风格_简易::默认组件边框颜色 = 颜色::黑色;
只读 颜色 风格_简易::默认组件背景颜色 = 颜色::白色;

风格* 风格_简易::获取风格(组件 *组件指针) {
	if (组件指针 == 空指针)
		抛出 异常("");

	if (对象属于类型<组件, 组件>(组件指针)) {
		返回 创建 风格_简易_组件(组件指针);
	} else if (对象属于类型<容器, 组件>(组件指针)) {
		返回 创建 风格_简易_容器(组件指针);
	}

	返回 0;
}

风格_简易& 风格_简易::构造() {
	返回 本体;
}

void 风格_简易::析构() {

}

风格_简易& 风格_简易::构造(组件 *组件指针) {
	风格::构造(组件指针);

	返回 本体;
}

风格_简易& 风格_简易::复制构造(只读 风格_简易 &其他实例) {
	抛出 异常("风格_简易:复制构造方法不存在！\n"); // 默认操作，实现复制构造方法需将其删除

	返回 本体;
}

风格_简易& 风格_简易::移动构造(风格_简易 &&其他实例) {
	抛出 异常("风格_简易:移动构造方法不存在！\n"); // 默认操作，实现移动构造方法需将其删除

	返回 本体;
}

void 风格_简易::绘制组件边框(图形处理::画笔 *笔) {
	笔->设置颜色(组件边框颜色);
	笔->绘制矩形(组件指针->获取绝对外接矩形());
}

void 风格_简易::绘制组件背景(图形处理::画笔 *笔) {
	笔->设置颜色(组件背景颜色);
	笔->填充矩形(组件指针->获取绝对外接矩形());
}

void 风格_简易::绘制组件(图形处理::画笔 *笔) {
	// 默认为空
}

}
}

