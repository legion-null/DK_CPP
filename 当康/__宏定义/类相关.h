#pragma once

#include "定义.h"

// 公共部分
#define __声明(类) \

#define __定义(类) \



// 一般类 -------------------------------------------------------------------------//

// 声明
#define 类声明(类) \
__声明(类)\
公开:\
	/* 默认构造函数 */\
	类() {\
		构造();\
	}\
\
	/* 析构函数 */\
	虚函数 ~类() {\
		析构();\
	}\
\
公开:\
	/* 复制构造函数 */\
	类(只读 类 &其他实例) {\
		复制构造(其他实例);\
	}\
\
	/* 移动构造函数 */\
	类(类 &&其他实例) {\
		移动构造(static_cast<类&&>(其他实例));\
	}\
\
公开:\
	/* 复制构造函数 操作符重载形式 */\
	类& 操作符=(只读 类 &其他实例) {\
		返回 复制构造(其他实例);\
	}\
\
	/* 移动构造函数 操作符重载形式 */\
	类& 操作符=(类 &&其他实例) {\
		返回 移动构造(static_cast<类&&>(其他实例));\
	}\

// 实现
#define 类定义(类)

//--------------------------------------------------------------------------------//

// 抽象类 -------------------------------------------------------------------------//

// 声明
#define 抽象类声明(类) \
__声明(类)\
公开:\
	/* 默认构造函数 */\
	类() {\
		构造();\
	}\
\
	/* 析构函数 */\
	虚函数 ~类() {\
		析构();\
	}\
\
公开:\
	/* 复制构造函数 */\
	类(只读 类 &其他实例) {\
		复制构造(其他实例);\
	}\
\
	/* 移动构造函数 */\
	类(类 &&其他实例) {\
		移动构造(static_cast<类&&>(其他实例));\
	}\
\
公开:\
	/* 复制构造函数 操作符重载形式 */\
	类& 操作符=(只读 类 &其他实例) {\
		返回 复制构造(其他实例);\
	}\
\
	/* 移动构造函数 操作符重载形式 */\
	类& 操作符=(类 &&其他实例) {\
		返回 移动构造(static_cast<类&&>(其他实例));\
	}\

// 实现
#define	抽象类定义(类) \

//--------------------------------------------------------------------------------//

// 接口类 -------------------------------------------------------------------------//

// 声明
#define 接口声明(类)

// 实现
#define	接口定义(类)

//--------------------------------------------------------------------------------//

// 模板类 -------------------------------------------------------------------------//

// 声明
#define	模板声明(类)

// 实现
#define	模板定义(类)

//--------------------------------------------------------------------------------//
